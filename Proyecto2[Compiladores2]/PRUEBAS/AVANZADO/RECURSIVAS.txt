program Funciones;
function factorial(n: integer): integer;
begin
    if (n = 0) then
        begin
            factorial := 1
        end
    else
        begin
            factorial := n * factorial(n - 1);
        end
end;

function ackermann(m,n: integer): integer;
begin
    if (m = 0) then
        begin
            ackermann := n + 1
        end
    else if (m>0) AND (n = 0) then
        begin
            ackermann := ackermann(m - 1, 1)
        end
    else
        begin
            ackermann := ackermann(m - 1, ackermann(m,n - 1));
        end
end;

procedure Hanoi(discos:integer; origen,aux,destino:string);
begin
    if(discos=1) then
        begin
            writeln('Mover Disco de ',origen,' a ',destino)
        end
    else
        Begin
            Hanoi(discos-1,origen,destino,aux);
            writeln('Mover disco de ',origen,' a ',destino);
            Hanoi(discos-1,aux,origen,destino);
        End;
end;

begin
    writeln('1 Factorial');
    writeln(factorial(6));

    writeln('2 Ackermann');
    writeln(ackermann(3,3));
    
    writeln('3 Hanoi');
    Hanoi(3, 'A', 'B', 'C');
end.













program Funciones;



begin
    ackermann(2,1);
end.





factorial(){

	T1 = STACK[0] ; 
	if ( T1 = 0 ) goto L1;
	goto L2;

	L1: STACK[1] = 1;
	goto L3;

	L2: T2 = T1 - 1; 
	STACK[0] = T2
	factorial(); 
	T3 = STACK[1] ; 
	T4 = T1 * T3; 
	STACK[1] = T4;
	goto L3;
	L3:
	
}

main {
	STACK[0] = 6
	factorial();
	printf(STACK[1]);
}



		
		
function ackermann(m,n: integer): integer;
begin
    if (m = 0) then
        begin
            ackermann := n + 1
        end
    else if (m>0) AND (n = 0) then
        begin
            ackermann := ackermann(m - 1, 1)
        end
    else
        begin
            ackermann := ackermann(m - 1, ackermann(m,n - 1));
        end
end;		
		
		
		
ackermann(){

	T1 = STACK[0] ; 
	if ( T1 = 0 ) goto L1;
	goto L2;

	L1: T2 = STACK[1] ; 
	T3 = T2 + 1; 
	STACK[2] = T3;
	goto L3;

	L2: if ( T1 > 0 ) goto L4;
	goto L5;
	L4: if ( T2 = 0 ) goto L6;
	goto L7;

	L6: T4 = T1 - 1; 
	STACK[0] = T4
	STACK[1] = 1
	ackermann(); 
	T5 = HEAP[1]
	STACK[2] = T5;
	goto L3;

	L5: L7: T6 = STACK[0] ; 
	T7 = T6 - 1; 
	T8 = STACK[1] ; 
	T9 = T8 - 1; 
	STACK[0] = -1
	STACK[1] = T9
	ackermann(); 
	T10 = HEAP[1]
	STACK[0] = T7
	STACK[1] = 0
	ackermann(); 
	T11 = HEAP[1]
	STACK[2] = T11;
	goto L3;
	
	L3:

}

main {
	STACK[0] = 2
	STACK[1] = 1
	ackermann(); 
}
